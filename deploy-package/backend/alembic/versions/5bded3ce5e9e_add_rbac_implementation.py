"""add_rbac_implementation

Revision ID: 5bded3ce5e9e
Revises: add_created_at_new
Create Date: 2025-02-23 18:07:40.775645

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "5bded3ce5e9e"
down_revision: Union[str, None] = "add_created_at_new"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Create an enum for roles
roles_enum = postgresql.ENUM("guest", "user", "user_admin", "super_admin", name="role")


def upgrade() -> None:
    # Create the roles enum type
    roles_enum.create(op.get_bind())

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "teams",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["users.id"], name=op.f("fk_teams_created_by_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_teams")),
    )
    op.create_index(op.f("ix_teams_id"), "teams", ["id"], unique=False)
    op.alter_column("api_keys", "user_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column(
        "api_keys",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.create_index(op.f("ix_api_keys_id"), "api_keys", ["id"], unique=False)
    op.alter_column(
        "system_settings",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.drop_index("ix_system_settings_id", table_name="system_settings")
    op.alter_column(
        "usage_records", "user_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "usage_records", "api_key_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "usage_records",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "usage_records", "endpoint", existing_type=sa.VARCHAR(), nullable=True
    )
    op.create_index(op.f("ix_usage_records_id"), "usage_records", ["id"], unique=False)

    # Add role column with a default value
    op.add_column("users", sa.Column("role", roles_enum, nullable=True))
    op.execute("UPDATE users SET role = 'user' WHERE role IS NULL")
    op.alter_column("users", "role", nullable=False)

    op.add_column("users", sa.Column("team_id", sa.Integer(), nullable=True))
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_foreign_key(
        op.f("fk_users_team_id_teams"), "users", "teams", ["team_id"], ["id"]
    )
    op.drop_column("users", "is_superuser")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "is_superuser",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(op.f("fk_users_team_id_teams"), "users", type_="foreignkey")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_column("users", "team_id")
    op.drop_column("users", "role")
    op.drop_index(op.f("ix_usage_records_id"), table_name="usage_records")
    op.alter_column(
        "usage_records", "endpoint", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "usage_records",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "usage_records", "api_key_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "usage_records", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_index("ix_system_settings_id", "system_settings", ["id"], unique=False)
    op.alter_column(
        "system_settings",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.drop_index(op.f("ix_api_keys_id"), table_name="api_keys")
    op.alter_column(
        "api_keys",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("api_keys", "user_id", existing_type=sa.INTEGER(), nullable=False)
    op.drop_index(op.f("ix_teams_id"), table_name="teams")
    op.drop_table("teams")

    # Drop the roles enum type
    roles_enum.drop(op.get_bind())
    # ### end Alembic commands ###
