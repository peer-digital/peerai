name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      - name: Extract repository info
        run: |
          echo "Repository: ${{ github.repository }}"
      
      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # @note: Node.js version - adjust if your project requires a different version
          cache: 'npm'
          cache-dependency-path: 'frontend/admin-dashboard/package-lock.json'
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend/admin-dashboard
          npm ci
      
      # Build frontend
      - name: Build frontend
        run: |
          cd frontend/admin-dashboard
          npm run build
          echo "Frontend build completed"
      
      # Make scripts executable
      - name: Make scripts executable
        run: |
          chmod +x ./scripts/*.sh
      
      # Create necessary tarballs
      - name: Package deployment files
        run: |
          # Package backend code
          tar -czf backend-code.tar.gz backend/
          
          # Package frontend build
          tar -czf frontend-build.tar.gz -C frontend/admin-dashboard dist/
          
          # Package scripts
          tar -czf scripts.tar.gz scripts/
          
          echo "Files packaged successfully"
      
      # Transfer files to server
      - name: Transfer files to server
        uses: appleboy/scp-action@v0.1.4  # @note: Reliable SCP action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend-code.tar.gz,frontend-build.tar.gz,scripts.tar.gz,.env.example"
          target: "/home/ubuntu/"
          strip_components: 0
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
      
      # Deploy to server
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
          script: |
            echo "Starting deployment process..."
            
            # Extract files
            mkdir -p ~/deploy-temp
            tar -xzf ~/scripts.tar.gz -C ~/deploy-temp
            
            # Make scripts executable
            chmod +x ~/deploy-temp/scripts/*.sh
            
            # Create necessary directories
            mkdir -p ~/peer-ai/backend
            mkdir -p ~/peer-ai/frontend/admin-dashboard/dist
            mkdir -p ~/peer-ai/deployment
            
            # Extract backend code
            tar -xzf ~/backend-code.tar.gz -C ~/peer-ai
            
            # Extract frontend build
            tar -xzf ~/frontend-build.tar.gz -C ~/peer-ai/frontend/admin-dashboard
            
            # Fix nginx configuration
            cat > ~/peer-ai/deployment/nginx-config.conf << 'EOF'
server {
    listen 80;
    server_name _;

    # API routes - forward to backend
    location /api/ {
        proxy_pass http://localhost:8000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Set timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # OpenAPI documentation
    location /docs {
        proxy_pass http://localhost:8000/docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://localhost:8000/health;
        access_log off;
        add_header Content-Type application/json;
    }

    # Frontend app - serve static files
    location / {
        root /home/ubuntu/peer-ai/frontend/admin-dashboard/dist;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
}
EOF
            
            # Apply nginx configuration
            sudo cp ~/peer-ai/deployment/nginx-config.conf /etc/nginx/sites-available/peerai
            sudo ln -sf /etc/nginx/sites-available/peerai /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx
            
            # Setup backend environment
            cd ~/peer-ai/backend
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Copy environment file
            if [ -f ~/.env.example ]; then
              cp ~/.env.example ~/peer-ai/backend/.env
            fi
            
            # Setup backend service
            cat > ~/peer-ai/deployment/peerai-backend.service << 'EOF'
[Unit]
Description=PeerAI Backend Service
After=network.target

[Service]
User=ubuntu
Group=ubuntu
WorkingDirectory=/home/ubuntu/peer-ai/backend
Environment="PATH=/home/ubuntu/peer-ai/backend/venv/bin"
ExecStart=/home/ubuntu/peer-ai/backend/venv/bin/uvicorn backend.main:app --host 0.0.0.0 --port 8000
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

            # Install service
            sudo cp ~/peer-ai/deployment/peerai-backend.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable peerai-backend
            sudo systemctl restart peerai-backend
            
            # Check service status
            echo "Deployment completed! Service status:"
            sudo systemctl status peerai-backend --no-pager
            sudo systemctl status nginx --no-pager
            
            echo "Frontend available at: http://$(hostname -I | awk '{print $1}')"
            echo "API available at: http://$(hostname -I | awk '{print $1}')/api"