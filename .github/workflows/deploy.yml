name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # @note: Node.js version - adjust if your project requires a different version
          cache: 'npm'
          cache-dependency-path: '**/package.json'
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend/admin-dashboard
        run: |
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci for clean install"
            npm ci
          else
            echo "No package-lock.json found, using npm install instead"
            npm install
          fi
      
      # Build frontend
      - name: Build frontend
        working-directory: frontend/admin-dashboard
        run: npm run build
      
      # Create deployment package
      - name: Create deployment package
        run: |
          # Create frontend tarball
          cd frontend/admin-dashboard
          tar -czf frontend-build.tar.gz dist/
          cd ../..
          
          # Create scripts tarball
          tar -czf scripts.tar.gz scripts/
          
          # Create deployment package
          mkdir -p deployment
          cp scripts.tar.gz deployment/
          cp frontend/admin-dashboard/frontend-build.tar.gz deployment/
          
          # Create deployment script for VM
          cat > deployment/run_deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Starting deployment process on VM..."
          
          # Extract scripts
          cd /home/ubuntu
          mkdir -p scripts
          tar -xzf deployment/scripts.tar.gz -C /home/ubuntu/
          chmod +x /home/ubuntu/scripts/*.sh
          
          # Run pre-deployment script
          echo "Running pre-deployment preparation..."
          /home/ubuntu/scripts/pre_deploy.sh
          
          # Create application directory if it doesn't exist
          mkdir -p /home/ubuntu/peer-ai/frontend
          
          # Extract frontend build
          echo "Extracting frontend build..."
          tar -xzf deployment/frontend-build.tar.gz -C /home/ubuntu/peer-ai/frontend/
          
          # Run main deployment script
          echo "Running main deployment..."
          cd /home/ubuntu/peer-ai
          /home/ubuntu/scripts/deploy.sh
          
          # Run database initialization if needed
          echo "Initializing database if needed..."
          /home/ubuntu/scripts/init_db.sh
          
          # Run cleanup
          echo "Running post-deployment cleanup..."
          /home/ubuntu/scripts/cleanup.sh
          
          # Check deployment status
          echo "Checking deployment status..."
          /home/ubuntu/scripts/check_deployment.sh
          
          echo "Deployment process completed!"
          EOF
          
          chmod +x deployment/run_deploy.sh
      
      # Transfer deployment package to VM
      - name: Transfer deployment package to VM
        uses: appleboy/scp-action@v0.1.4  # @note: Reliable SCP action for GitHub Actions
        with:
          host: 158.174.210.91  # @note: Production server IP address
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment/*,scripts/*"
          target: "/home/ubuntu/"
          strip_components: 0
          use_insecure_cipher: true
      
      # Execute deployment on VM
      - name: Execute deployment
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91  # @note: Production server IP address
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            chmod +x /home/ubuntu/deployment/run_deploy.sh
            /home/ubuntu/deployment/run_deploy.sh 