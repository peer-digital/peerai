name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # @note: Node.js version - adjust if your project requires a different version
          cache: 'npm'
          cache-dependency-path: '**/package.json'
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend/admin-dashboard
        run: |
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci for clean install"
            npm ci
          else
            echo "No package-lock.json found, using npm install instead"
            npm install
          fi
      
      # Build frontend
      - name: Build frontend
        working-directory: frontend/admin-dashboard
        run: npm run build
      
      # Create deployment package
      - name: Create deployment package
        run: |
          # Verify scripts directory contents first
          echo "Checking scripts directory..."
          ls -la scripts/
          
          # Create frontend tarball from the build output
          cd frontend/admin-dashboard
          tar -czf frontend-build.tar.gz dist/
          cd ../..
          
          # Create scripts tarball - copy directly to avoid creating an extra directory
          echo "Creating scripts package..."
          tar -czf scripts.tar.gz -C scripts .
          
          # Prepare deployment directory
          mkdir -p deployment
          mv scripts.tar.gz deployment/
          mv frontend/admin-dashboard/frontend-build.tar.gz deployment/
          
          # Copy nginx.conf to deployment directory to ensure the latest version is used
          echo "Copying nginx.conf to deployment directory..."
          cp deployment/nginx.conf deployment/nginx.conf.latest
          
          # Ensure run_deploy.sh is executable
          chmod +x deployment/run_deploy.sh
      
      # Transfer deployment package to VM
      - name: Transfer deployment package to VM
        uses: appleboy/scp-action@v0.1.4  # @note: Reliable SCP action for GitHub Actions
        with:
          host: 158.174.210.91  # @note: Production server IP address
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment/*,scripts/*"
          target: "/home/ubuntu/"
          strip_components: 0
          use_insecure_cipher: true
      
      # Execute deployment on VM
      - name: Execute deployment
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91  # @note: Production server IP address
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          command_timeout: 30m  # @note: Increased timeout for long-running deployment operations
          script: |
            # Set up error handling and logging
            exec > >(tee -a /tmp/deployment.log) 2>&1
            echo "=== Starting deployment at $(date) ==="
            set -e
            
            # Execute the comprehensive deploy.sh script to set up the entire stack FIRST
            # This includes database migrations that the frontend script depends on
            echo "Setting up the complete backend stack..."
            chmod +x /home/ubuntu/scripts/deploy.sh
            
            # Run the backend deployment script with verbose output
            bash -x /home/ubuntu/scripts/deploy.sh || { echo "ERROR: Backend deployment script failed"; exit 1; }
            
            # Run the frontend deployment script AFTER backend is set up
            echo "Starting frontend deployment script..."
            chmod +x /home/ubuntu/deployment/run_deploy.sh
            /home/ubuntu/deployment/run_deploy.sh || { echo "ERROR: Frontend deployment script failed"; exit 1; }
            
            echo "=== Deployment completed at $(date) ==="
            
      # Verify deployment
      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91  # @note: Production server IP address
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            echo "=== Verifying deployment ==="
            
            # Check if services are running
            echo "Checking services status..."
            systemctl status nginx
            systemctl status postgresql
            systemctl status peerai
            
            # Check if website is accessible
            echo "Checking if website is accessible..."
            curl -s -o /dev/null -w "%{http_code}" http://localhost 