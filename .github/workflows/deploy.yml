name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      - name: Set default repository values
        run: |
          # Set hardcoded values for the correct repository
          echo "GITHUB_REPO_OWNER=peer-digital" >> $GITHUB_ENV
          echo "REPO_NAME=peerai" >> $GITHUB_ENV
          echo "Using hardcoded repository: peer-digital/peerai"
      
      - name: Extract repository name (for reference only)
        run: |
          # Extract repository name from full repository path
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Full repository: ${{ github.repository }}"
          echo "Repository name: $REPO_NAME"
          echo "NOTE: Using hardcoded repository peer-digital/peerai for deployment"
      
      - name: Verify GitHub token
        run: |
          # For public repositories, we don't need to verify repository access with a token
          # Just check if the repository exists
          echo "Testing repository access..."
          REPO_PATH="${{ env.GITHUB_REPO_OWNER }}/${{ env.REPO_NAME }}"
          echo "Checking access to repository: $REPO_PATH"
          if curl -s "https://api.github.com/repos/${REPO_PATH}" | grep -q "\"name\":"; then
            echo "✅ Repository access confirmed"
          else
            echo "❌ Cannot access repository"
            echo "Please ensure the repository exists at https://github.com/${REPO_PATH}"
            exit 1
          fi
      
      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # @note: Node.js version - adjust if your project requires a different version
          cache: 'npm'
          cache-dependency-path: '**/package.json'
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend/admin-dashboard
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci for clean install"
            npm ci
          else
            echo "No package-lock.json found, using npm install instead"
            npm install
          fi
      
      # Build frontend
      - name: Build frontend
        run: |
          cd frontend/admin-dashboard
          npm run build
          echo "Frontend build completed"
      
      # Create tarball of the built frontend
      - name: Create frontend tarball
        run: |
          cd frontend/admin-dashboard
          # Check if dist directory has content
          if [ "$(ls -A dist 2>/dev/null)" ]; then
            echo "Creating tarball of dist directory"
            tar -czf frontend-build.tar.gz dist/
          else
            echo "Dist directory is empty or doesn't exist. Creating an empty tarball."
            mkdir -p empty-build
            touch empty-build/README.md
            echo "This is an empty build directory. Build may have failed." > empty-build/README.md
            tar -czf frontend-build.tar.gz empty-build/
          fi
          cp frontend-build.tar.gz ../../
          echo "Created frontend tarball"
      
      - name: Make scripts executable
        run: |
          chmod +x ./scripts/*.sh
      
      - name: Prepare Docker Compose files for deployment
        run: |
          echo "Preparing Docker Compose files for deployment..."
          # Create a tarball of the Docker Compose files and Dockerfiles
          tar -czf docker-compose-files.tar.gz docker-compose.yml deployment/nginx-single-server.conf backend/Dockerfile frontend/admin-dashboard/Dockerfile frontend/admin-dashboard/nginx.conf .env.example
      
      - name: Transfer files via SCP
        uses: appleboy/scp-action@v0.1.4  # @note: Reliable SCP action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "scripts/,deployment/,frontend-build.tar.gz,docker-compose-files.tar.gz"
          target: "/home/ubuntu/"
          strip_components: 0
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
      
      - name: Ensure scripts are executable and setup environment
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
          script: |
            chmod +x /home/ubuntu/scripts/*.sh
            echo "Made all scripts executable"
            
            # Extract Docker Compose files
            mkdir -p /home/ubuntu/peer-ai
            tar -xzf /home/ubuntu/docker-compose-files.tar.gz -C /home/ubuntu/peer-ai/
            
            # Make sure the project directories exist
            mkdir -p /home/ubuntu/peer-ai/backend
            mkdir -p /home/ubuntu/peer-ai/frontend/admin-dashboard
            mkdir -p /home/ubuntu/peer-ai/deployment/ssl
            
            # Create basic .env file from example
            cp /home/ubuntu/peer-ai/.env.example /home/ubuntu/peer-ai/.env
            
            # Create backend structure if it doesn't exist
            if [ ! -f "/home/ubuntu/peer-ai/backend/requirements.txt" ]; then
              echo "Setting up basic backend structure..."
              cp -r /home/ubuntu/backend/* /home/ubuntu/peer-ai/backend/ 2>/dev/null || true
            fi
      
      # Deploy frontend tarball
      - name: Deploy frontend tarball
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
          script: |
            echo "Deploying frontend build from tarball..."
            mkdir -p /home/ubuntu/peer-ai/frontend/admin-dashboard/dist
            tar -xzf /home/ubuntu/frontend-build.tar.gz -C /home/ubuntu/peer-ai/frontend/admin-dashboard/
            # If we extracted from empty-build, move files to the right place
            if [ -d "/home/ubuntu/peer-ai/frontend/admin-dashboard/empty-build" ]; then
              mv /home/ubuntu/peer-ai/frontend/admin-dashboard/empty-build/* /home/ubuntu/peer-ai/frontend/admin-dashboard/dist/ 2>/dev/null || true
              rm -rf /home/ubuntu/peer-ai/frontend/admin-dashboard/empty-build
            fi
            echo "Frontend deployment completed"
      
      - name: Start container services
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
          script: |
            cd /home/ubuntu/peer-ai
            
            # Install Docker and Docker Compose if not already installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ubuntu
            fi
            
            # Stop any running containers
            sudo docker-compose down || true
            
            # Build and start containers
            sudo docker-compose build
            sudo docker-compose up -d
            
            # Wait for backend to be ready
            echo "Waiting for services to start..."
            sleep 10
            
            # Run migrations
            sudo docker-compose exec -T backend alembic upgrade head || echo "Migration failed, but continuing deployment"
            
            echo "Deployment completed successfully!"
            echo "Frontend available at: http://158.174.210.91"
            echo "API available at: http://158.174.210.91/api" 