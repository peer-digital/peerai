name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      - name: Extract repository info
        run: |
          echo "Repository: ${{ github.repository }}"
      
      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # @note: Node.js version - adjust if your project requires a different version
          cache: 'npm'
          cache-dependency-path: 'frontend/admin-dashboard/package-lock.json'
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend/admin-dashboard
          npm ci
      
      # Build frontend
      - name: Build frontend
        run: |
          cd frontend/admin-dashboard
          npm run build
          echo "Frontend build completed"
      
      # Make scripts executable
      - name: Make scripts executable
        run: |
          chmod +x ./scripts/*.sh
      
      # Create necessary tarballs
      - name: Package deployment files
        run: |
          # Package backend code
          tar -czf backend-code.tar.gz backend/
          
          # Package frontend build
          tar -czf frontend-build.tar.gz -C frontend/admin-dashboard dist/
          
          # Package scripts
          tar -czf scripts.tar.gz scripts/
          
          echo "Files packaged successfully"
      
      # Transfer files to server
      - name: Transfer files to server
        uses: appleboy/scp-action@v0.1.4  # @note: Reliable SCP action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend-code.tar.gz,frontend-build.tar.gz,scripts.tar.gz,.env.example"
          target: "/home/ubuntu/"
          strip_components: 0
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
      
      # Run deployment
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
          script: |
            echo "Starting deployment process..."
            
            # Extract files
            mkdir -p ~/deploy-temp
            tar -xzf ~/scripts.tar.gz -C ~/deploy-temp
            
            # Make scripts executable
            chmod +x ~/deploy-temp/scripts/*.sh
            
            # Run server setup script
            ~/deploy-temp/scripts/setup-server.sh
            
            # Extract backend code
            mkdir -p ~/peer-ai/backend
            tar -xzf ~/backend-code.tar.gz -C ~/peer-ai
            
            # Extract frontend build
            mkdir -p ~/peer-ai/frontend/admin-dashboard/dist
            tar -xzf ~/frontend-build.tar.gz -C ~/peer-ai/frontend/admin-dashboard
            
            # Set up Python environment
            cd ~/peer-ai/backend
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Copy environment file
            cp ~/.env.example ~/peer-ai/backend/.env
            
            # Start services
            sudo systemctl restart nginx
            sudo systemctl restart peerai-backend
            
            echo "Deployment completed!"
            echo "Frontend available at: http://$(hostname -I | awk '{print $1}')"
            echo "API available at: http://$(hostname -I | awk '{print $1}')/api"