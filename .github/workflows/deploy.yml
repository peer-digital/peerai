name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      clean_install:
        description: 'Clean installation (removes all existing files)'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      - name: Extract repository info
        run: |
          echo "Repository: ${{ github.repository }}"
      
      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # @note: Node.js version - adjust if your project requires a different version
          cache: 'npm'
          cache-dependency-path: 'frontend/admin-dashboard/package-lock.json'
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend/admin-dashboard
          npm ci
      
      # Build frontend
      - name: Build frontend
        run: |
          cd frontend/admin-dashboard
          npm run build
          echo "Frontend build completed"
      
      # Make scripts executable
      - name: Make scripts executable
        run: |
          chmod +x ./scripts/*.sh
      
      # Verify code for packaging
      - name: Verify code before packaging
        run: |
          echo "Verifying code files before packaging..."
          if [ ! -d "backend" ]; then
            echo "ERROR: Backend directory not found!"
            ls -la
            exit 1
          fi
          
          if [ ! -d "frontend/admin-dashboard/dist" ]; then
            echo "ERROR: Frontend build directory not found!"
            ls -la frontend/admin-dashboard
            exit 1
          fi
          
          echo "All required directories found. Proceeding with packaging."
      
      # Create necessary tarballs
      - name: Package deployment files
        run: |
          # Package backend code
          tar -czf backend-code.tar.gz backend/
          
          # Package frontend build
          tar -czf frontend-build.tar.gz -C frontend/admin-dashboard dist/
          
          # Package scripts
          tar -czf scripts.tar.gz scripts/
          
          # Verify tarballs
          if [ ! -f "backend-code.tar.gz" ]; then
            echo "ERROR: Failed to create backend-code.tar.gz"
            exit 1
          fi
          
          if [ ! -f "frontend-build.tar.gz" ]; then
            echo "ERROR: Failed to create frontend-build.tar.gz"
            exit 1
          fi
          
          echo "Files packaged successfully"
      
      # Transfer files to server
      - name: Transfer files to server
        uses: appleboy/scp-action@v0.1.4  # @note: Reliable SCP action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend-code.tar.gz,frontend-build.tar.gz,scripts.tar.gz,.env.example"
          target: "/home/ubuntu/"
          strip_components: 0
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
      
      # Verify files on server
      - name: Verify files on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            echo "Verifying files on server..."
            ls -lah ~/*.tar.gz
            
            if [ ! -f "~/backend-code.tar.gz" ]; then
              echo "WARNING: ~/backend-code.tar.gz not found, checking absolute path..."
              if [ ! -f "/home/ubuntu/backend-code.tar.gz" ]; then
                echo "ERROR: Backend code tarball not found at /home/ubuntu/backend-code.tar.gz"
                exit 1
              else
                echo "Found backend code at /home/ubuntu/backend-code.tar.gz"
              fi
            fi
            
            echo "All required files found on server."
      
      # Clean up VM before deployment if requested
      - name: Clean VM (if requested)
        if: ${{ github.event.inputs.clean_install == 'true' }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            echo "Running thorough cleanup before deployment..."
            mkdir -p ~/deploy-temp
            tar -xzf /home/ubuntu/scripts.tar.gz -C ~/deploy-temp
            chmod +x ~/deploy-temp/scripts/cleanup.sh
            ~/deploy-temp/scripts/cleanup.sh
      
      # Deploy to server
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Disable host key checking to handle host key changes
          use_insecure_cipher: true
          script: |
            echo "Starting deployment process..."
            
            # Verify files
            echo "Verifying deployment files..."
            ls -la /home/ubuntu/backend-code.tar.gz || echo "Backend code tarball not found!"
            ls -la /home/ubuntu/frontend-build.tar.gz || echo "Frontend build tarball not found!"
            
            # Extract files
            mkdir -p ~/deploy-temp
            tar -xzf /home/ubuntu/scripts.tar.gz -C ~/deploy-temp
            
            # Make scripts executable
            chmod +x ~/deploy-temp/scripts/*.sh
            
            # Run deployment script
            cd ~/deploy-temp
            ./scripts/deploy.sh
            
            echo "Deployment completed!"
            echo "Frontend available at: http://$(hostname -I | awk '{print $1}')"
            echo "API available at: http://$(hostname -I | awk '{print $1}')/api"
            
            # Check service status
            echo "Service status:"
            sudo systemctl status peerai-backend --no-pager
            sudo systemctl status nginx --no-pager