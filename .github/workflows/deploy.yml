name: Build and Deploy Frontend & Backend

on:
  push:
    branches:
      - main  # @note: Trigger deployment on push to main branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      # --- Frontend Build Steps ---
      - name: Setup Node.js
        uses: actions/setup-node@v4  # @note: Latest Node.js setup action
        with:
          node-version: '20'  # @note: Node.js version for frontend build
          cache: 'npm'  # @note: Cache npm dependencies for faster builds
      
      - name: Install Frontend Dependencies
        run: |
          cd frontend/admin-dashboard
          npm ci  # @note: Clean install for reproducible builds
      
      - name: Build Frontend
        run: |
          cd frontend/admin-dashboard
          npm run build  # @note: Build frontend application
        env:
          VITE_API_BASE_URL: http://158.174.210.91  # @url: Production VM IP
          VITE_APP_ENV: production
          VITE_AUTH_ENABLED: true
      
      - name: Create Frontend Tarball
        run: |
          cd frontend/admin-dashboard
          tar -czvf ../../frontend-build.tar.gz dist/  # @note: Create tarball of build output
      
      # --- SSH Setup ---
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0  # @note: Secure SSH key handling
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add remote host to known_hosts
        run: ssh-keyscan -H 158.174.210.91 >> ~/.ssh/known_hosts  # @url: Production VM IP
      
      - name: Make deploy script executable
        run: |
          chmod +x ./scripts/deploy.sh
      
      # --- Deployment Steps ---
      - name: Deploy Files via Rsync
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='node_modules/' \
            --exclude='frontend-build.tar.gz' \
            --exclude='frontend/admin-dashboard/node_modules/' \
            --exclude='frontend/admin-dashboard/dist/' \
            ./ ubuntu@158.174.210.91:/home/ubuntu/peer-ai/
          
          # Copy tarball and deploy script separately
          scp ./frontend-build.tar.gz ubuntu@158.174.210.91:/home/ubuntu/peer-ai/
          scp ./scripts/deploy.sh ubuntu@158.174.210.91:/home/ubuntu/peer-ai/scripts/
      
      - name: Debug Environment
        run: |
          echo "Checking if environment variables are set (values hidden):"
          if [ ! -z "${{ secrets.DATABASE_URL }}" ]; then echo "DATABASE_URL is set"; else echo "Warning: DATABASE_URL is NOT set"; fi
          if [ ! -z "${{ secrets.EXTERNAL_LLM_API_KEY }}" ]; then echo "EXTERNAL_LLM_API_KEY is set"; else echo "Warning: EXTERNAL_LLM_API_KEY is NOT set"; fi
          if [ ! -z "${{ secrets.HOSTED_LLM_API_KEY }}" ]; then echo "HOSTED_LLM_API_KEY is set"; else echo "Warning: HOSTED_LLM_API_KEY is NOT set"; fi
          if [ ! -z "${{ secrets.JWT_SECRET_KEY }}" ]; then echo "JWT_SECRET_KEY is set"; else echo "Warning: JWT_SECRET_KEY is NOT set"; fi
          if [ ! -z "${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDS }}" ]; then echo "GOOGLE_SERVICE_ACCOUNT_CREDS is set"; else echo "Warning: GOOGLE_SERVICE_ACCOUNT_CREDS is NOT set"; fi
      
      - name: Run deployment script
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          EXTERNAL_LLM_API_KEY: ${{ secrets.EXTERNAL_LLM_API_KEY }}
          HOSTED_LLM_API_KEY: ${{ secrets.HOSTED_LLM_API_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          GOOGLE_SERVICE_ACCOUNT_CREDS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDS }}
          # @note: Add any other non-secret env vars needed
          PORT: 8000
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          RATE_LIMIT_MINUTE: 60
          ENVIRONMENT: production
          ALLOWED_ORIGIN: http://158.174.210.91
          EXTERNAL_MODEL: mistral-tiny
          EXTERNAL_LLM_URL: https://api.mistral.ai/v1/chat/completions
          DEBUG: false
          MOCK_MODE: false
          LOG_LEVEL: INFO
          GOOGLE_WORKSPACE_ADMIN_EMAIL: adam.falkenberg@peerdigital.se
          NOTIFICATION_EMAIL_ALIAS: notifications@peerdigital.se
          VITE_TEST_EMAIL: admin@peerai.se
          VITE_TEST_PASSWORD: admin123
          JWT_ALGORITHM: HS256
          VITE_API_BASE_URL: http://158.174.210.91
          VITE_APP_ENV: production
          VITE_AUTH_ENABLED: true
        with:
          host: 158.174.210.91  # @url: Production VM IP
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          envs: DATABASE_URL,EXTERNAL_LLM_API_KEY,HOSTED_LLM_API_KEY,JWT_SECRET_KEY,GOOGLE_SERVICE_ACCOUNT_CREDS,PORT,ACCESS_TOKEN_EXPIRE_MINUTES,RATE_LIMIT_MINUTE,ENVIRONMENT,ALLOWED_ORIGIN,EXTERNAL_MODEL,EXTERNAL_LLM_URL,DEBUG,MOCK_MODE,LOG_LEVEL,GOOGLE_WORKSPACE_ADMIN_EMAIL,NOTIFICATION_EMAIL_ALIAS,VITE_TEST_EMAIL,VITE_TEST_PASSWORD,JWT_ALGORITHM,VITE_API_BASE_URL,VITE_APP_ENV,VITE_AUTH_ENABLED
          script: |
            # Navigate to the app directory
            cd /home/ubuntu/peer-ai
            echo "Current directory: $(pwd)"

            # Create the .env.production file
            echo "Creating .env.production file..."
            cat > .env.production <<ENV
            # Auto-generated .env.production by GitHub Actions
            DATABASE_URL=$DATABASE_URL
            EXTERNAL_LLM_API_KEY=$EXTERNAL_LLM_API_KEY
            HOSTED_LLM_API_KEY=$HOSTED_LLM_API_KEY
            JWT_SECRET_KEY=$JWT_SECRET_KEY
            GOOGLE_SERVICE_ACCOUNT_CREDS=$GOOGLE_SERVICE_ACCOUNT_CREDS
            PORT=$PORT
            ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES
            RATE_LIMIT_MINUTE=$RATE_LIMIT_MINUTE
            ENVIRONMENT=$ENVIRONMENT
            ALLOWED_ORIGIN=$ALLOWED_ORIGIN
            EXTERNAL_MODEL=$EXTERNAL_MODEL
            EXTERNAL_LLM_URL=$EXTERNAL_LLM_URL
            DEBUG=$DEBUG
            MOCK_MODE=$MOCK_MODE
            LOG_LEVEL=$LOG_LEVEL
            GOOGLE_WORKSPACE_ADMIN_EMAIL=$GOOGLE_WORKSPACE_ADMIN_EMAIL
            NOTIFICATION_EMAIL_ALIAS=$NOTIFICATION_EMAIL_ALIAS
            VITE_TEST_EMAIL=$VITE_TEST_EMAIL
            VITE_TEST_PASSWORD=$VITE_TEST_PASSWORD
            JWT_ALGORITHM=$JWT_ALGORITHM
            VITE_API_BASE_URL=$VITE_API_BASE_URL
            VITE_APP_ENV=$VITE_APP_ENV
            VITE_AUTH_ENABLED=$VITE_AUTH_ENABLED
            ENV
            echo ".env.production created successfully."
            ls -l .env.production

            # Extract frontend build
            echo "Extracting frontend build..."
            mkdir -p frontend/admin-dashboard/dist
            tar -xzvf frontend-build.tar.gz -C frontend/admin-dashboard/dist --strip-components=1
            rm frontend-build.tar.gz  # Clean up tarball
            echo "Frontend build extracted successfully."

            # Debug: Check variables
            echo "Checking environment variables before running deploy.sh:"
            for var in DATABASE_URL EXTERNAL_LLM_API_KEY HOSTED_LLM_API_KEY JWT_SECRET_KEY GOOGLE_SERVICE_ACCOUNT_CREDS; do
              if [ ! -z "${!var}" ]; then
                echo "$var is set"
              else
                echo "Error: $var is NOT set on remote server"
                exit 1
              fi
            done

            # Run deployment script with error handling
            echo "Running deployment script (./scripts/deploy.sh)..."
            chmod +x ./scripts/deploy.sh
            ./scripts/deploy.sh || {
              echo "Deployment script ./scripts/deploy.sh failed"
              exit 1
            }
            echo "Deployment script completed successfully."
      
      - name: Check deployment status
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91  # @url: Production VM IP
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            cd /home/ubuntu/peer-ai && ./scripts/check_deployment.sh || {
              echo "Deployment check failed"
              exit 1
            } 