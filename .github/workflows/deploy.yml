name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL
      
      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # @note: Node.js version - adjust if your project requires a different version
          cache: 'npm'
          cache-dependency-path: '**/package.json'
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend/admin-dashboard
        run: |
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci for clean install"
            npm ci
          else
            echo "No package-lock.json found, using npm install instead"
            npm install
          fi
      
      # Build frontend
      - name: Build frontend
        working-directory: frontend/admin-dashboard
        run: npm run build
      
      # Create deployment package
      - name: Create deployment package
        run: |
          # Create frontend tarball from the build output
          cd frontend/admin-dashboard
          tar -czf frontend-build.tar.gz dist/
          cd ../..
          
          # Create scripts tarball
          echo "Creating scripts package..."
          mkdir -p deployment_temp
          cp scripts/*.sh deployment_temp/
          chmod +x deployment_temp/*.sh
          tar -czf scripts.tar.gz -C deployment_temp .
          rm -rf deployment_temp
          
          # Prepare deployment directory
          mkdir -p deployment
          mv scripts.tar.gz deployment/
          mv frontend/admin-dashboard/frontend-build.tar.gz deployment/
          
          # Copy Nginx configuration
          cp deployment/nginx.conf deployment/
          
          # Copy our run_deploy.sh script directly (not generating it inline)
          chmod +x deployment/run_deploy.sh
      
      # Transfer deployment package to VM
      - name: Transfer deployment package to VM
        uses: appleboy/scp-action@v0.1.4  # @note: Reliable SCP action for GitHub Actions
        with:
          host: 158.174.210.91  # @note: Production server IP address
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment/*,scripts/*"
          target: "/home/ubuntu/"
          strip_components: 0
          use_insecure_cipher: true
      
      # Execute deployment on VM
      - name: Execute deployment
        uses: appleboy/ssh-action@v1.0.0  # @note: Reliable SSH action for GitHub Actions
        with:
          host: 158.174.210.91  # @note: Production server IP address
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          use_insecure_cipher: true
          script: |
            chmod +x /home/ubuntu/deployment/run_deploy.sh
            /home/ubuntu/deployment/run_deploy.sh 