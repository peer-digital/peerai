name: CI

# Trigger workflow on pull requests and direct pushes to main/dev
on:
  pull_request:  # Run on pull requests
    branches: [ "main", "dev" ]
  push:
    branches: [ "main", "dev" ]  # Also run on direct pushes to main/dev

jobs:
  backend-tests:  # Renamed from build-and-test to be more specific
    runs-on: ubuntu-latest
    
    services:
      postgres:  # Add PostgreSQL service for integration tests
        image: postgres:14  # @note: PostgreSQL version - update with caution
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      # Step 1: Get the code
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL

      # Step 2: Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v4  # @note: GitHub's official Python setup action - do not change URL
        with:
          python-version: "3.11"
          cache: 'pip'  # Enable pip caching

      # Step 3: Install all dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      # Step 4: Verify code quality with pre-commit
      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files

      # Step 5: Run code formatters and linters
      - name: Run linters
        run: |
          ruff . --exit-zero
          black --check .
      
      # Step 6: Run unit tests
      - name: Run unit tests
        run: |
          pytest tests/test_auth.py tests/test_inference.py -v --cov=api --cov-report=xml

      # Step 7: Run integration tests
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db  # @note: Test database URL - must match DATABASE_URL for CI
        run: |
          alembic upgrade head  # Run migrations before tests
          pytest tests/test_db_integration.py tests/test_api_integration.py -v --cov=api --cov-append --cov-report=xml

      # Step 8: Run load tests
      - name: Run load tests
        run: |
          locust -f tests/locustfile.py --headless -u 10 -r 2 --run-time 30s --host http://localhost:8000

      # Step 9: Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3  # @note: Codecov's official GitHub action - do not change URL
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

      # Step 10: Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v3  # @note: GitHub's official caching action - do not change URL
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/admin-dashboard  # Set default working directory for all run steps

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3  # @note: GitHub's official Node.js setup action - do not change URL
        with:
          node-version: '18'  # Match your development Node.js version
          cache: 'npm'
          cache-dependency-path: frontend/admin-dashboard/package-lock.json

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci  # Clean install for CI environments

      # Step 4: Run ESLint
      - name: Run ESLint
        run: npm run lint

      # Step 5: Run unit tests
      - name: Run unit tests
        run: npm run test:unit:coverage

      # Step 6: Build the application
      - name: Build
        run: npm run build

      # Step 7: Start the application and run Cypress tests
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6  # @note: Official Cypress GitHub action - do not change URL
        with:
          working-directory: frontend/admin-dashboard
          start: npm run dev
          wait-on: 'http://localhost:3000'  # Wait for dev server to be ready
          wait-on-timeout: 120  # Give it up to 2 minutes
          browser: chrome
          record: false  # Set to true if you have Cypress Cloud configured
          config-file: cypress.config.ts

      # Step 8: Upload test artifacts
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4  # @note: GitHub's official artifact upload action - do not change URL
        if: failure()  # Only upload on test failure
        with:
          name: cypress-screenshots
          path: frontend/admin-dashboard/cypress/screenshots
          retention-days: 5

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4  # @note: GitHub's official artifact upload action - do not change URL
        if: always()  # Always upload test videos
        with:
          name: cypress-videos
          path: frontend/admin-dashboard/cypress/videos
          retention-days: 5

      # Step 9: Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3  # @note: Codecov's official GitHub action - do not change URL
        with:
          file: ./frontend/admin-dashboard/coverage/coverage-final.json
          fail_ci_if_error: true
          verbose: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # @note: GitHub's official checkout action - do not change URL

      - name: Run Snyk Security Scan
        uses: snyk/actions/python@master  # @note: Snyk's official GitHub action - do not change URL
        continue-on-error: true  # Make this step non-blocking until token is configured
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main  # @note: TruffleHog's official GitHub action - do not change URL
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified 